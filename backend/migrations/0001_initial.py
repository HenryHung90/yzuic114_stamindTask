# Generated by Django 4.2.17 on 2025-02-11 04:49

import backend.models.users
from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "student_id",
                    models.CharField(
                        max_length=50,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                        verbose_name="學號/教師編號",
                    ),
                ),
                (
                    "user_type",
                    models.CharField(
                        choices=[("TEACHER", "教師"), ("STUDENT", "學生")],
                        default="STUDENT",
                        max_length=10,
                        verbose_name="使用者類型",
                    ),
                ),
                ("name", models.CharField(help_text="姓名", max_length=100)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "db_table": "users",
                "ordering": ["-class_name", "student_id"],
            },
            managers=[
                ("objects", backend.models.users.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name="ChatHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "chat_history",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.JSONField(
                            default={
                                "content": "",
                                "sender": "",
                                "time": "%Y-%m-%d %H:%M:%S",
                            }
                        ),
                        default=list,
                        size=None,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "聊天記錄",
                "verbose_name_plural": "聊天記錄列表",
                "db_table": "chat_histories",
                "ordering": ["-updated_at"],
            },
        ),
        migrations.CreateModel(
            name="ClassName",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=100, unique=True, verbose_name="班級名稱"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "班級",
                "verbose_name_plural": "班級列表",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Exam",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="考卷名稱")),
                ("is_open", models.BooleanField(default=True)),
                (
                    "group_type",
                    models.CharField(
                        choices=[("EXPERIMENTAL", "實驗組"), ("CONTROL", "對照組")],
                        default="EXPERIMENTAL",
                        max_length=20,
                        verbose_name="組別類型",
                    ),
                ),
                (
                    "questions",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.JSONField(default=dict, verbose_name="題目內容"),
                        default=list,
                        size=None,
                        verbose_name="考卷題目列表",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "class_name",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="exams",
                        to="backend.classname",
                        verbose_name="班級",
                    ),
                ),
            ],
            options={
                "verbose_name": "考卷",
                "verbose_name_plural": "考卷列表",
                "db_table": "exams",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Experience",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="體驗任務名稱")),
                ("content", models.JSONField(default=dict, verbose_name="體驗任務內容")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "class_name",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="experiences",
                        to="backend.classname",
                        verbose_name="班級",
                    ),
                ),
            ],
            options={
                "verbose_name": "體驗任務",
                "verbose_name_plural": "體驗任務列表",
                "db_table": "experiences",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Feedback",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("teacher_feedback", models.TextField(blank=True, verbose_name="老師回饋")),
                ("student_feedback", models.TextField(blank=True, verbose_name="學生回饋")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "教師回饋",
                "verbose_name_plural": "教師回饋列表",
                "db_table": "feedbacks",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ReflectionQuestion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="反思題目名稱")),
                (
                    "questions",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=500),
                        default=list,
                        size=None,
                        verbose_name="反思問題列表",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "反思題目",
                "verbose_name_plural": "反思題目列表",
                "db_table": "reflection_questions",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="StudentTaskPlan",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("content", models.JSONField(default=dict, verbose_name="任務計畫設定內容")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "任務計劃設定",
                "verbose_name_plural": "任務計畫設定列表",
                "db_table": "student_task_plans",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="StudentTaskProcessCode",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("html_code", models.TextField(blank=True, verbose_name="HTML 程式")),
                (
                    "js_code",
                    models.TextField(
                        blank=True,
                        default="//Write your JavaScript Code here",
                        verbose_name="JavaScript 程式",
                    ),
                ),
                (
                    "css_code",
                    models.TextField(
                        blank=True,
                        default="//Write your CSS Code here",
                        verbose_name="CSS 程式",
                    ),
                ),
                ("code_history", models.JSONField(blank=True, default=dict, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "計劃執行程式",
                "verbose_name_plural": "計劃執行程式列表",
                "db_table": "student_task_process_code",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="StudentTaskProcessNote",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("content", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "計劃執行筆記",
                "verbose_name_plural": "計劃執行筆記列表",
                "db_table": "student_task_process_note",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="StudentTaskReflection",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("score", models.IntegerField(verbose_name="自我評分")),
                (
                    "reflects",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=500),
                        default=list,
                        size=None,
                        verbose_name="反思回饋列表",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "任務反思設定",
                "verbose_name_plural": "任務反思設定列表",
                "db_table": "student_task_reflections",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TextBook",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="教材名稱")),
                ("content", models.JSONField(default=dict, verbose_name="教材內容")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "教材",
                "verbose_name_plural": "教材列表",
                "db_table": "text_books",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Task",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=120, verbose_name="任務名稱")),
                ("is_open", models.BooleanField(default=True, verbose_name="是否開放")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "class_name",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="tasks",
                        to="backend.classname",
                        verbose_name="班級",
                    ),
                ),
                (
                    "experience",
                    models.OneToOneField(
                        blank=True,
                        help_text="該任務的完整內容體驗",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="task",
                        to="backend.experience",
                        verbose_name="體驗任務",
                    ),
                ),
                (
                    "reflection_question",
                    models.OneToOneField(
                        blank=True,
                        help_text="該任務的反思題目",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="task",
                        to="backend.reflectionquestion",
                        verbose_name="反思題目",
                    ),
                ),
                (
                    "text_book",
                    models.OneToOneField(
                        blank=True,
                        help_text="該任務的完整教材",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="task",
                        to="backend.textbook",
                        verbose_name="任務教材",
                    ),
                ),
            ],
            options={
                "verbose_name": "教師發布任務",
                "verbose_name_plural": "教師發布的任務，學生依據內容領取",
                "db_table": "tasks",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="StudentTaskProcess",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("content", models.JSONField(default=dict, verbose_name="任務執行設定內容")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "process_code",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="task_process",
                        to="backend.studenttaskprocesscode",
                        verbose_name="計劃執行程式",
                    ),
                ),
                (
                    "process_note",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="task_process",
                        to="backend.studenttaskprocessnote",
                        verbose_name="計劃執行筆記",
                    ),
                ),
            ],
            options={
                "verbose_name": "任務執行設定",
                "verbose_name_plural": "任務執行設定列表",
                "db_table": "student_task_processes",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="StudentTask",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "class_name",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="student_tasks",
                        to="backend.classname",
                        verbose_name="班級",
                    ),
                ),
                (
                    "feedback",
                    models.OneToOneField(
                        blank=True,
                        help_text="老師與學生之間的回饋訊息",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="student_task",
                        to="backend.feedback",
                        verbose_name="教師回饋",
                    ),
                ),
                (
                    "plan",
                    models.OneToOneField(
                        blank=True,
                        help_text="學生的學習計畫",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="student_task",
                        to="backend.studenttaskplan",
                        verbose_name="學習計畫",
                    ),
                ),
                (
                    "process",
                    models.OneToOneField(
                        blank=True,
                        help_text="學生自行紀錄學習過程紀錄",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="student_task",
                        to="backend.studenttaskprocess",
                        verbose_name="學習過程",
                    ),
                ),
                (
                    "reflection",
                    models.OneToOneField(
                        blank=True,
                        help_text="學生對自我的學習反思",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="student_task",
                        to="backend.studenttaskreflection",
                        verbose_name="學習反思",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="exams",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="歸屬學生",
                    ),
                ),
                (
                    "task",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="student_task",
                        to="backend.task",
                        verbose_name="任務",
                    ),
                ),
            ],
            options={
                "verbose_name": "學生任務",
                "verbose_name_plural": "學生根據任務列表取得的任務內容",
                "db_table": "student_tasks",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="StudentRecord",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "action_record",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.JSONField(
                            default={
                                "action_id": "",
                                "action_name": "",
                                "context": "",
                                "object_id": "",
                                "object_name": "",
                                "object_type": "",
                                "verb": "",
                            }
                        ),
                        size=None,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "class_name",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="student_records",
                        to="backend.classname",
                        verbose_name="班級",
                    ),
                ),
            ],
            options={
                "verbose_name": "學生操作記錄",
                "verbose_name_plural": "學生操作記錄列表",
                "db_table": "student_records",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="StudentGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "group_type",
                    models.CharField(
                        choices=[("EXPERIMENTAL", "實驗組"), ("CONTROL", "對照組")],
                        default="EXPERIMENTAL",
                        max_length=20,
                        verbose_name="組別類型",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "class_name",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="student_groups",
                        to="backend.classname",
                        verbose_name="班級",
                    ),
                ),
            ],
            options={
                "verbose_name": "學生群組",
                "verbose_name_plural": "學生群組列表",
                "db_table": "student_groups",
                "ordering": ["class_name", "group_type"],
            },
        ),
        migrations.CreateModel(
            name="StudentExam",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "answers",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.JSONField(default=dict, verbose_name="答案內容"),
                        default=list,
                        size=None,
                        verbose_name="考卷答案列表",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "class_name",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="student_exams",
                        to="backend.classname",
                        verbose_name="班級",
                    ),
                ),
                (
                    "exam",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="student_exams",
                        to="backend.exam",
                        verbose_name="考卷依據",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="student_exams",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="歸屬學生",
                    ),
                ),
            ],
            options={
                "verbose_name": "學生答題卷",
                "verbose_name_plural": "學生答題卷列表",
                "db_table": "student_exams",
                "ordering": ["class_name", "-created_at"],
            },
        ),
        migrations.AddField(
            model_name="user",
            name="chat_history",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="user",
                to="backend.chathistory",
                verbose_name="聊天紀錄",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="class_name",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="users",
                to="backend.classname",
                verbose_name="班級",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="groups",
            field=models.ManyToManyField(
                blank=True,
                help_text="The groups this user belongs to.",
                related_name="user_group_set",
                to="auth.group",
                verbose_name="groups",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="student_group",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="user",
                to="backend.studentgroup",
                verbose_name="學生組別",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="student_record",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="user",
                to="backend.studentrecord",
                verbose_name="學生操作記錄",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="user_permissions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Specific permissions for this user.",
                related_name="user_permission_set",
                to="auth.permission",
                verbose_name="user permissions",
            ),
        ),
        migrations.AddConstraint(
            model_name="studenttask",
            constraint=models.UniqueConstraint(
                fields=("student_id", "class_name", "task"),
                name="unique_student_id_and_class_name_and_task",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="studentgroup",
            unique_together={("class_name", "group_type")},
        ),
        migrations.AddConstraint(
            model_name="user",
            constraint=models.UniqueConstraint(
                fields=("student_id", "class_name"),
                name="unique_student_id_and_class_name",
            ),
        ),
    ]
